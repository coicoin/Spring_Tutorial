<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- закомментировано так как создана JAVA конфигурация -->

    <!-- по этому тэгу контейнер инверсии контроля сканирует пакеты предоставленные в атрибуте на наличие бинов-->
    <!-- <context:component-scan base-package="org.example.web"/> -->

    <!-- маппинг ресурсов для загрузки лого -->
    <!-- <mvc:resources mapping="/**" location="classpath:images"/> -->

    <!-- mvc:annotation-driven элемент подключение аннотаций MVC -->
    <!-- с помощью mvc:annotation-driven в dispatcherServlet регистрируется RequestMappingHandlerMapping класс отвечающий за обработку аннотаций
    RequestMapping автоматически сканирует все controller бины, чтобы в дальнейшем dispatcherServlet мог вызвать эти методы во время обработки запросов -->
    <!-- RequestMappingHandlerAdapter, HandlerAdapter помогает dispatcherServlet вызывать обработчик независимо от того какой обработчик был фактически вызван -->
    <!-- dispatcherServlet использует HandlerAdapter для фактического вызова нужного метода обработчика -->
    <!-- HandlerInterceptor выполняет какой-то дополнительный код перед выполнением метода обработчика,
    а также после выполнения запроса когда тот пройдет полный жизненный цикл -->
    <!--<mvc:annotation-driven/>-->

    <!-- для работы с HTML, определет view resolver, дополнительный тэг для захвата всех поступающих запросов и возврат HTTP шаблоны, так как по умолчанию JSP не поддреживается -->
    <!-- <mvc:default-servlet-handler/> -->

    <!-- https://javastudy.ru/spring-mvc/spring-mvc-viewresolver/ -->
    <!-- После того как в модель modelAndView было записано имя представления viewName = ‘index’ и произошел выход из метода, то в действие включается ViewResolver.
    Для этого примера согласно настройкам в dispatcher-servlet.xml класс InternalResourceViewResolver будет искать представление с именем index,
    у которого префикс /WEB-INF/views/, а суффикс .jsp/html. Другими словами он должен найти представление с именем /WEB-INF/views/login_page.html.  -->
    <!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".html"/>
    </bean> -->

    <!--<bean class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine"/>
        <property name="order" value="1"/>
    </bean>-->

    <!-- SpringTemplateEngine автоматически добавляет SpringStandardDialect -->
    <!--<bean id="templateEngine" class="org.thymeleaf.spring5.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver"/>-->
        <!-- Включение компилятора SpringEL в Spring 4.2.4 или новее может ускорить выполнение в большинстве сценариев,
        но может но может быть несовместимо с конкретными случаями, когда выражения на одной странице повторно используются
        в разных данных, так что этот флаг по умолчанию имеет значение "false" для более безопасной обратной совместимости -->
        <!--<property name="enableSpringELCompiler" value="true"/>
    </bean>-->

    <!-- SpringResourceTemplateResolver автоматически интегрируется с собственной инфраструктурой Spring для обработки
    web-ресурсов и необходим SpringTemplateEngine -->
    <!--<bean id="templateResolver" class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".html"/>-->
        <!-- HTML - значение по умолчанию. Но добавлено здесь для большей ясности -->
        <!--<property name="templateMode" value="HTML"/>-->
        <!-- Cache страниц по-умолчанию имеет значение "true". При значении "false" шаблоны будут автоматически обновляться
        при их изменении -->
        <!--<property name="cacheable" value="true"/>
    </bean>-->

    <!-- альтрернатива создания контроллера для теста,
    создание dispatcherServlet-ом простейшего view контроллера который вернет страницу book_shelf.html -->
    <!-- <mvc:view-controller path="/books/shelf" view-name="book_shelf"/> -->


    <!-- https://proselyte.net/tutorials/spring-tutorial-full-version/ioc-containers/ -->
</beans>